<?xml version="1.0" encoding="UTF-8" ?>
<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-2.1.xsd">
    <service verb="perform" noun="Login" type="java" authenticate="false" location="org.mk.moqui.authentication.Login" method="login" />
    <service verb="perform" noun="Callback" type="java" authenticate="false" location="org.mk.moqui.authentication.Login" method="callback" />
    <service verb="perform" noun="Logout" type="java" authenticate="false" location="org.mk.moqui.authentication.Login" method="logout" />
    <service verb="get" noun="ApiKey" type="script" authenticate="false" location="component://moqui-pac4j-authentication/src/main/groovy/org/mk/moqui/authentication/AuthorizeJWT.groovy">
        <in-parameters>
            <parameter name="token" />
        </in-parameters>
    </service>
    <service verb="revoke" noun="ApiKey" authenticate="anonymous-all">
        <in-parameters>
            <parameter name="apiKey"/>
        </in-parameters>
        <actions>

            <script>
                def eci = ec as org.moqui.impl.context.ExecutionContextImpl
                def loginKey = eci.ecfi.getSimpleHash(apiKey, "", eci.ecfi.getLoginKeyHashType(), false)
            </script>
            <entity-find-one entity-name="moqui.security.UserLoginKey" value-field="key">
                <field-map field-name="loginKey"/>
            </entity-find-one>
            <if condition="key">
                <!--  TODO: Remove -->
                <log message="Deleting key ${apiKey}"/>
                <entity-delete value-field="key" />
            </if>
            <if condition="ec.user.userId">
                <script>ec.user.logoutUser()</script>
            </if>
        </actions>
    </service>

    <service verb="verify" noun="AccessToken" authenticate="anonymous-all" type="java" method="verifyToken" location="org.mk.moqui.authentication.OidcAuthenticationServices" />

    <service verb="get" noun="OidcRealmConfiguration" authenticate="anonymous-all" type="java" method="getRealmConfiguration" location="org.mk.moqui.authentication.OidcAuthenticationServices">
        <out-parameters>
            <parameter name="oidcRealmUrl" />
        </out-parameters>
    </service>
</services>
